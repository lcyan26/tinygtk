dnl Process this file with autoconf to create configure.
AC_PREREQ(2.53)
AC_INIT(ChangeLog)

dnl ==========================================================================
dnl                               Versioning              
dnl ==========================================================================

dnl Making releases:
dnl   PANGO_MICRO_VERSION += 1;
dnl   PANGO_INTERFACE_AGE += 1;
dnl   PANGO_BINARY_AGE += 1;
dnl if any functions have been added, set PANGO_INTERFACE_AGE to 0.
dnl if backwards compatibility has been broken,
dnl set PANGO_BINARY_AGE _and_ PANGO_INTERFACE_AGE to 0.

dnl
dnl We do the version number components as m4 macros
dnl so that we can base configure --help output off
dnl of them.
dnl

dnl The triplet 
m4_define([pango_major_version],1)
m4_define([pango_minor_version],2)
m4_define([pango_micro_version],4)

PANGO_MAJOR_VERSION=pango_major_version()
PANGO_MINOR_VERSION=pango_minor_version()
PANGO_MICRO_VERSION=pango_micro_version()
PANGO_VERSION=$PANGO_MAJOR_VERSION.$PANGO_MINOR_VERSION.$PANGO_MICRO_VERSION

dnl The X.Y in -lpango-X.Y line. This is expected to stay 1.0 until Pango 2.
PANGO_API_VERSION=1.0

dnl Number of releases since we've added interfaces
PANGO_INTERFACE_AGE=4

dnl Number of releases since we've broken binary compatibility.
# PANGO_BINARY_AGE=0
PANGO_BINARY_AGE=`expr 100 '*' $PANGO_MINOR_VERSION + $PANGO_MICRO_VERSION`

dnl This is the last version with which we have compatibility with
dnl with the modules for; it isn't the same as
dnl PANGO_API_VERSION.'PANGO_MICRO_VERSION - PANGO_BINARY_AGE' since we have
dnl engine only API    
PANGO_MODULE_VERSION=1.2.0

AC_SUBST(PANGO_MAJOR_VERSION)
AC_SUBST(PANGO_MINOR_VERSION)
AC_SUBST(PANGO_VERSION)
AC_SUBST(PANGO_API_VERSION)
AC_SUBST(PANGO_MICRO_VERSION)
AC_SUBST(PANGO_INTERFACE_AGE)
AC_SUBST(PANGO_BINARY_AGE)
AC_SUBST(PANGO_MODULE_VERSION)

dnl libtool versioning
lt_current=`expr 100 '*' $PANGO_MINOR_VERSION + $PANGO_MICRO_VERSION - $PANGO_INTERFACE_AGE`
lt_revision=$PANGO_INTERFACE_AGE
lt_age=`expr $PANGO_BINARY_AGE - $PANGO_INTERFACE_AGE`
LT_VERSION_INFO="$lt_current:$lt_revision:$lt_age"
LT_CURRENT_MINUS_AGE=`expr $lt_current - $lt_age`

AC_SUBST(LT_VERSION_INFO)
AC_SUBST(LT_CURRENT_MINUS_AGE)

dnl ==========================================================================

AM_INIT_AUTOMAKE(pango, $PANGO_VERSION)

AM_CONFIG_HEADER(config.h)

AC_PROG_CC
	
dnl 
dnl Check for a working C++ compiler, but do not bail out, if none is found.
dnl We use this for an automated test for C++ header correctness.
dnl 
AC_CHECK_PROGS(CXX, $CCC c++ g++ gcc CC cxx cc++ cl, gcc)
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_TRY_COMPILE(,[class a { int b; } c;], ,CXX=)
AM_CONDITIONAL(HAVE_CXX, test "$CXX" != "")
AC_LANG_RESTORE

AC_LIBTOOL_WIN32_DLL
AM_DISABLE_STATIC
AM_PROG_LIBTOOL

AC_MSG_CHECKING([for some Win32 platform])
case "$host" in
  *-*-mingw*|*-*-cygwin*)
    pango_platform_win32=yes
    ;;
  *)
    pango_platform_win32=no
    ;;
esac
AC_MSG_RESULT([$pango_platform_win32])
AM_CONDITIONAL(PLATFORM_WIN32, test "$pango_platform_win32" = "yes")

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    pango_os_win32=yes
    ;;
  *)
    pango_os_win32=no
    ;;
esac
AC_MSG_RESULT([$pango_os_win32])
AM_CONDITIONAL(OS_WIN32, test "$pango_os_win32" = "yes")

if test "$pango_os_win32" = "yes"; then
  AC_CHECK_PROG(ms_librarian, lib.exe, yes, no)
fi
AM_CONDITIONAL(MS_LIB_AVAILABLE, test x$ms_librarian = xyes)

changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

dnl declare --enable-* args and collect ac_help strings

m4_define([debug_default],dnl
m4_if(m4_bregexp(pango_minor_version(),[[13579]]),-1,minimum,yes))

AC_ARG_ENABLE(debug, [  --enable-debug=[no/minimum/yes] turn on debugging @<:@default=]debug_default()[@:>@],,enable_debug=debug_default())

if test "x$enable_debug" = "xyes"; then
  PANGO_DEBUG_FLAGS="-DPANGO_ENABLE_DEBUG"
else
  PANGO_DEBUG_FLAGS="-DG_DISABLE_CAST_CHECKS"

  if test "x$enable_debug" = "xno"; then
    PANGO_DEBUG_FLAGS="$GLIB_DEBUG_FLAGS -DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
  fi
fi

AC_SUBST(PANGO_DEBUG_FLAGS)

AC_ARG_ENABLE(rebuilds, [  --disable-rebuilds      disable all source autogeneration rules],,enable_rebuilds=yes)

AM_CONDITIONAL(CROSS_COMPILING, test $cross_compiling = yes)

# define a MAINT-like variable REBUILD which is set if Perl
# is found, so autogenerated sources can be rebuilt

AC_CHECK_PROGS(PERL, perl5 perl)

REBUILD=\#
if test "x$enable_rebuilds" = "xyes" && \
     test -n "$PERL" && \
     $PERL -e 'exit !($] >= 5.002)' > /dev/null 2>&1 ; then
  REBUILD=
fi
AC_SUBST(REBUILD)

AC_PATH_XTRA

if test x$no_x = xyes ; then
  AC_MSG_WARN([X development libraries not found])
  have_x=false
else
  X_LIBS="$X_LIBS -lX11"
  have_x=true
  AC_DEFINE(HAVE_X)
fi
AM_CONDITIONAL(HAVE_X, $have_x) 

#
# Check for fontconfig
#
have_fontconfig=false
have_freetype=false
have_xft=false

PKG_CHECK_MODULES(FONTCONFIG, fontconfig >= 1.0.1, have_fontconfig=true, :)

if $have_fontconfig ; then
  #
  # Checks for FreeType
  #
  FREETYPE_LIBS=
  FREETYPE_CFLAGS=
  AC_PATH_PROG(FREETYPE_CONFIG, freetype-config, no)
  if test "x$FREETYPE_CONFIG" != "xno" ; then
    FREETYPE_CFLAGS=`$FREETYPE_CONFIG --cflags`
    FREETYPE_LIBS=`$FREETYPE_CONFIG --libs`

    pango_save_ldflags=$LDFLAGS
    LDFLAGS="$LDFLAGS $FREETYPE_LIBS"
    AC_CHECK_LIB(freetype, FT_Get_Next_Char, have_freetype=true, :)
    LDFLAGS=$pango_save_ldflags
  fi

  FREETYPE_LIBS="$FONTCONFIG_LIBS $FREETYPE_LIBS"
  FREETYPE_CFLAGS="$FONTCONFIG_CFLAGS $FREETYPE_CFLAGS"

  AC_SUBST(FREETYPE_LIBS)
  AC_SUBST(FREETYPE_CFLAGS)

  #
  # Checks for Xft/XRender
  #
  if $have_x && $have_freetype ; then
    PKG_CHECK_MODULES(XFT, xft >= 2.0.0, have_xft=true, :)
  fi

  AC_SUBST(XFT_LIBS)
  AC_SUBST(XFT_CFLAGS)
else
  AC_MSG_WARN([No fontconfig found, skipping tests for FreeType and Xft])
fi

AM_CONDITIONAL(HAVE_FREETYPE, $have_freetype)
AM_CONDITIONAL(HAVE_XFT, $have_xft)

#
# Checks for Win32 GDI
#
have_win32=false
WIN32_LIBS=""
WIN32_CFLAGS=""
# The following doesn't work with autoconf-2.13, so we check $host instead
# AC_CHECK_LIB(gdi32, GetTextMetricsA@8, have_win32=true, : )
case "$host" in
  *-*-mingw*|*-*-cygwin*) have_win32=true ;;
esac


if test $have_win32 = true; then
  WIN32_LIBS="-lgdi32"
fi

AC_SUBST(WIN32_LIBS)
AM_CONDITIONAL(HAVE_WIN32, $have_win32) 

#
# We must have some backend defined, in order for the pango-querymodules
# rule in pango/Makefile.am to work correctly. If you are up to writing
# a new Pango backend outside of Pango, you are up to sending the necessary
# patch to fix that rule. :-)
#
if $have_freetype || $have_x || $have_xft || $have_win32  ; then : ; else
  AC_MSG_ERROR([*** Didn't find any of FreeType, X11, or Win32.
*** Must have at least one backend to build Pango.])
fi

#
# Checks for GLib
#
GLIB_REQUIRED_VERSION=2.1.3

AM_PATH_GLIB_2_0($GLIB_REQUIRED_VERSION, :,
  AC_MSG_ERROR([
*** Glib $GLIB_REQUIRED_VERSION or better is required. The latest version of 
*** Glib is always available from ftp://ftp.gtk.org/.]),
  gobject gmodule)

GLIB_CFLAGS=`$PKG_CONFIG --cflags gmodule-2.0 gthread-2.0`

AC_SUBST(GLIB_LIBS)
AC_SUBST(GLIB_CFLAGS)

#
# Allow setting a default path for XftConfig
#
AC_ARG_WITH(xftconfig-dir, [  --with-xftconfig-dir=PATH   path to system XftConfig file for minixft ])

if test "x$with_xftconfig_dir" != "x"; then
   AC_DEFINE_UNQUOTED(MINI_XFTCONFIG_DIR, "$with_xftconfig_dir")
fi

#
# The OpenType test programs aren't particularly portable
#
have_varargs=no
pango_saved_cppflags=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $GLIB_CFLAGS"
AC_MSG_CHECKING(Whether to build OpenType test programs)
AC_EGREP_CPP(pango_configure_test_yes, [
#include <glib.h>

#if defined(G_HAVE_ISO_VARARGS) || defined(G_HAVE_GNUC_VARARGS)
pango_configure_test_yes
#endif
],have_varargs=yes)
AC_MSG_RESULT($have_varargs)
AM_CONDITIONAL(BUILD_OT_TESTS, test $have_varargs = yes)
CPPFLAGS=$pango_saved_cppflags

#
# Allow building some or all modules included
#
AC_MSG_CHECKING(modules to link statically)

AC_ARG_WITH(included_modules, [  --with-included-modules=MODULE1,MODULE2,...   build the given modules into Pango])

arabic_modules="arabic-ft2,arabic-x,arabic-xft"
basic_modules="basic-ft2,basic-win32,basic-x,basic-xft"
hangul_modules="hangul-x,hangul-xft"
hebrew_modules="hebrew-ft2,hebrew-x,hebrew-xft"
indic_modules="bengali-x,devanagari-x,gurmukhi-x,gujarati-x,myanmar-x,indic-xft,indic-ft2"
tamil_modules="tamil-x"
thai_modules="thai-ft2,thai-x,thai-xft"

all_modules="$arabic_modules,$basic_modules,$hangul_modules,$hebrew_modules,$indic_modules,$tamil_modules,$thai_modules"

included_modules=""
if test "x$with_included_modules" != xno || test "x$with_included_modules" = x ; then

   # If no modules specified, include all modules
   if test "x$with_included_modules" = xyes ; then
     included_modules="$all_modules"
   else
     included_modules="$with_included_modules"
   fi
fi

AC_MSG_RESULT($included_modules)
AM_CONDITIONAL(HAVE_INCLUDED_MODULES, test "x$included_modules" != x)

INCLUDED_X_MODULES=
INCLUDED_XFT_MODULES=
INCLUDED_FT2_MODULES=
INCLUDED_WIN32_MODULES=
IFS="${IFS= 	}"; pango_save_ifs="$IFS"; IFS=","
for module in $included_modules; do
  if echo $indic_modules | egrep "(^| )$module(\$| )" > /dev/null; then
    dir=indic
  else
    dir=`echo $module | sed "s/-.*//"`
  fi

  if echo $module | egrep -- "-xft($|,)" > /dev/null; then
    INCLUDED_XFT_MODULES="$INCLUDED_XFT_MODULES \$(top_builddir)/modules/$dir/libpango-$module.la"
  elif echo $module | egrep -- "-ft2($|,)" > /dev/null; then
    INCLUDED_FT2_MODULES="$INCLUDED_FT2_MODULES \$(top_builddir)/modules/$dir/libpango-$module.la"
  elif echo $module | egrep -- "-x($|,)" > /dev/null; then
    INCLUDED_X_MODULES="$INCLUDED_X_MODULES \$(top_builddir)/modules/$dir/libpango-$module.la"
  elif echo $module | egrep -- "-win32($|,)" > /dev/null; then
    INCLUDED_WIN32_MODULES="$INCLUDED_WIN32_MODULES \$(top_builddir)/modules/$dir/libpango-$module.la"
  else
    AC_MSG_ERROR([the specified module $module does not exist])
  fi
done
IFS="$pango_save_ifs"

AC_SUBST(INCLUDED_X_MODULES)
AC_SUBST(INCLUDED_XFT_MODULES)
AC_SUBST(INCLUDED_FT2_MODULES)
AC_SUBST(INCLUDED_WIN32_MODULES)

AM_CONDITIONAL(INCLUDE_ARABIC_FT2,echo $included_modules | egrep '(^|,)arabic-ft2($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_ARABIC_X,echo $included_modules | egrep '(^|,)arabic-x($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_ARABIC_XFT,echo $included_modules | egrep '(^|,)arabic-xft($|,)' > /dev/null)

AM_CONDITIONAL(INCLUDE_BASIC_FT2,echo $included_modules | egrep '(^|,)basic-ft2($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_BASIC_WIN32,echo $included_modules | egrep '(^|,)basic-win32($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_BASIC_XFT,echo $included_modules | egrep '(^|,)basic-xft($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_BASIC_X,echo $included_modules | egrep '(^|,)basic-x($|,)' > /dev/null)

AM_CONDITIONAL(INCLUDE_HANGUL_X,echo $included_modules | egrep '(^|,)hangul-x($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_HANGUL_XFT,echo $included_modules | egrep '(^|,)hangul-xft($|,)' > /dev/null)

AM_CONDITIONAL(INCLUDE_HEBREW_FT2,echo $included_modules | egrep '(^|,)hebrew-ft2($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_HEBREW_X,echo $included_modules | egrep '(^|,)hebrew-x($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_HEBREW_XFT,echo $included_modules | egrep '(^|,)hebrew-xft($|,)' > /dev/null)

AM_CONDITIONAL(INCLUDE_BENGALI_X,echo $included_modules | egrep '(^|,)bengali-x($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_DEVANAGARI_X,echo $included_modules | egrep '(^|,)devanagari-x($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_GUJARATI_X,echo $included_modules | egrep '(^|,)gujarati-x($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_GURMUKHI_X,echo $included_modules | egrep '(^|,)gurmukhi-x($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_MYANMAR_X,echo $included_modules | egrep '(^|,)myanmar-x($|,)' > /dev/null)

AM_CONDITIONAL(INCLUDE_TAMIL_X,echo $included_modules | egrep '(^|,)tamil-x($|,)' > /dev/null)

AM_CONDITIONAL(INCLUDE_THAI_X,echo $included_modules | egrep '(^|,)thai-x($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_THAI_XFT,echo $included_modules | egrep '(^|,)thai-xft($|,)' > /dev/null)
AM_CONDITIONAL(INCLUDE_THAI_FT2,echo $included_modules | egrep '(^|,)thai-ft2($|,)' > /dev/null)

AM_CONDITIONAL(INCLUDE_INDIC_XFT,echo $included_modules | egrep '(^|,)indic-xft($|,)' > /dev/null)

AM_CONDITIONAL(INCLUDE_INDIC_FT2,echo $included_modules | egrep '(^|,)indic-ft2($|,)' > /dev/null)

#
# We use flockfile to implement pango_getline() - should be moved to GLib
# strtok_r isn't present on some systems
#
AC_CHECK_FUNCS(flockfile strtok_r)

#
# Check for the Uniscribe header usp10.h for Win32
#

AC_ARG_WITH(usp10, 
[  --with-usp10=DIRECTORY  where to find the usp10.h header file for Win32
                          (typically the Include directory in the
                          Platform SDK)])

USP10_H=no
if test "${with_usp10+set}" = set && test "$with_usp10" != no; then
  AC_MSG_CHECKING([for usp10.h])
  if test -f "$with_usp10"/usp10.h; then
    AC_MSG_RESULT(yes)
    USP10_H="$with_usp10"/usp10.h
    AC_DEFINE(HAVE_USP10_H)
  else
    if test -f "$with_usp10"/include/usp10.h; then
      AC_MSG_RESULT(yes)
      USP10_H="$with_usp10"/include/usp10.h
      AC_DEFINE(HAVE_USP10_H)
    else
      AC_MSG_RESULT(no)
    fi
  fi
fi
AC_SUBST(USP10_H)
AM_CONDITIONAL(HAVE_USP10_H, test "$USP10_H" != no)    

dnl **************************
dnl *** Checks for gtk-doc ***
dnl **************************

AC_ARG_WITH(html-dir, [  --with-html-dir=PATH    path to installed docs ])

if test "x$with_html_dir" = "x" ; then
  HTML_DIR='${datadir}/gtk-doc/html'
else
  HTML_DIR=$with_html_dir
fi

AC_SUBST(HTML_DIR)

#
# Check for sufficiently new gtk-doc
#
gtk_doc_min_version=0.10

AC_CHECK_PROG(GTKDOC, gtkdoc-mkdb, true, false)
if $GTKDOC ; then 
    gtk_doc_version=`gtkdoc-mkdb --version`
    AC_MSG_CHECKING([gtk-doc version ($gtk_doc_version) >= $gtk_doc_min_version])

    IFS="${IFS= 	}"; pango_save_IFS="$IFS"; IFS="."
    set $gtk_doc_version
    for min in $gtk_doc_min_version ; do
        cur=$1; shift
        if test -z $min ; then break; fi
        if test -z $cur ; then GTKDOC=false; break; fi
        if test $cur -gt $min ; then break ; fi
        if test $cur -lt $min ; then GTKDOC=false; break ; fi
    done
    IFS="$pango_save_IFS"

    if $GTKDOC ; then
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi
fi

AM_CONDITIONAL(HAVE_GTK_DOC, $GTKDOC)
AC_SUBST(HAVE_GTK_DOC)

AC_CHECK_PROG(DB2HTML, db2html, true, false)
AM_CONDITIONAL(HAVE_DOCBOOK, $DB2HTML)

dnl Let people disable the gtk-doc stuff.
AC_ARG_ENABLE(gtk-doc, [  --enable-gtk-doc        use gtk-doc to build documentation [default=no]], enable_gtk_doc="$enableval", enable_gtk_doc=no)

if test x$enable_gtk_doc = xyes ; then
  if test x$GTKDOC = xtrue ; then
    enable_gtk_doc=yes
  else
    enable_gtk_doc=no 
  fi
fi

dnl NOTE: We need to use a separate automake conditional for this
dnl       to make this work with the tarballs.
AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes)

dnl ********************************************************
dnl * See whether we need to load our modules as .la files *
dnl ********************************************************

use_la_modules=false
case $host in
  *-aix*) use_la_modules=true
esac

if $use_la_modules ; then
   AC_DEFINE(USE_LA_MODULES, 1, [Whether to load modules via .la files rather than directly])
fi

dnl ******************************************************
dnl * See whether to include shared library dependencies *
dnl ******************************************************

AC_ARG_ENABLE(explicit-deps, 
              [  --enable-explicit-deps=[yes/no/auto]    use explicit dependencies in .pc files [default=auto]],
              enable_explicit_deps="$enableval", 
              enable_explicit_deps=auto)

AC_MSG_CHECKING([Whether to write dependencies into .pc files])
case $enable_explicit_deps in
  auto)
    deplib_check_method=`(./libtool --config; echo eval echo \\$deplib_check_method) | sh`
    if test "X$deplib_check_method" = Xnone || test "x$enable_static" = xyes ; then
      enable_explicit_deps=yes  
    else
      enable_explicit_deps=no  
    fi
  ;;
  yes|no) 
  ;;
  *) AC_MSG_ERROR([Value given to --enable-explicit-deps must be one of yes, no or auto])
  ;;
esac
AC_MSG_RESULT($enable_explicit_deps)

if test $enable_explicit_deps = yes ; then
  PKGCONFIG_X_LIBS="$X_LIBS $X_EXTRA_LIBS"
  PKGCONFIG_XFT_LIBS=$XFT_LIBS
  PKGCONFIG_FREETYPE_LIBS=$FREETYPE_LIBS
else
  PKGCONFIG_X_LIBS=
  PKGCONFIG_XFT_LIBS=
  PKGCONFIG_FREETYPE_LIBS=
fi
AC_SUBST(PKGCONFIG_X_LIBS)
AC_SUBST(PKGCONFIG_XFT_LIBS)
AC_SUBST(PKGCONFIG_FREETYPE_LIBS)
AM_CONDITIONAL(DISABLE_EXPLICIT_DEPS, test $enable_explicit_deps = no)

AC_OUTPUT_COMMANDS([
cat > pango/module-defs.h <<EOTEXT
/* Autogenerated by configure. Do not edit */

#include "modules.h"

EOTEXT

IFS="${IFS= 	}"; pango_save_ifs="$IFS"; IFS=","
for module in $included_modules; do
  module_c=`echo $module | sed s/-/_/`
  cat >> pango/module-defs.h <<EOTEXT
extern void         _pango_${module_c}_script_engine_list (PangoEngineInfo **engines, int *n_engines);
extern PangoEngine *_pango_${module_c}_script_engine_load (const char *id);
extern void         _pango_${module_c}_script_engine_unload (PangoEngine *engine);

EOTEXT
done 

IFS="$pango_save_ifs"

### X modules
cat > pango/module-defs-x.c <<EOTEXT
/* Autogenerated by configure. Do not edit */

#include "module-defs.h"

PangoIncludedModule _pango_included_x_modules[] = {
EOTEXT

IFS="${IFS= 	}"; pango_save_ifs="$IFS"; IFS=","
for module in $included_modules; do
  if echo $module | egrep -- "-x($|,)" > /dev/null; then  
    module_c=`echo $module | sed s/-/_/`
    cat >> pango/module-defs-x.c <<EOTEXT
 { _pango_${module_c}_script_engine_list, _pango_${module_c}_script_engine_load,_pango_${module_c}_script_engine_unload },
EOTEXT
 fi
done

IFS="$pango_save_ifs"

cat >> pango/module-defs-x.c <<EOTEXT
 { NULL, NULL, NULL },
};
EOTEXT


### XFT modules
cat > pango/module-defs-xft.c <<EOTEXT
/* Autogenerated by configure. Do not edit */

#include "module-defs.h"

PangoIncludedModule _pango_included_xft_modules[] = {
EOTEXT

IFS="${IFS= 	}"; pango_save_ifs="$IFS"; IFS=","
for module in $included_modules; do
  if echo $module | egrep -- "-xft($|,)" > /dev/null; then
    module_c=`echo $module | sed s/-/_/`
    cat >> pango/module-defs-xft.c <<EOTEXT
 { _pango_${module_c}_script_engine_list, _pango_${module_c}_script_engine_load,_pango_${module_c}_script_engine_unload },
EOTEXT
  fi
done

IFS="$pango_save_ifs"

cat >> pango/module-defs-xft.c <<EOTEXT
 { NULL, NULL, NULL },
};
EOTEXT


### FT2 modules
cat > pango/module-defs-ft2.c <<EOTEXT
/* Autogenerated by configure. Do not edit */

#include "module-defs.h"

PangoIncludedModule _pango_included_ft2_modules[] = {
EOTEXT

IFS="${IFS= 	}"; pango_save_ifs="$IFS"; IFS=","
for module in $included_modules; do
  if echo $module | egrep -- "-ft2($|,)" > /dev/null; then
    module_c=`echo $module | sed s/-/_/`
    cat >> pango/module-defs-ft2.c <<EOTEXT
 { _pango_${module_c}_script_engine_list, _pango_${module_c}_script_engine_load,_pango_${module_c}_script_engine_unload },
EOTEXT
  fi
done

IFS="$pango_save_ifs"

cat >> pango/module-defs-ft2.c <<EOTEXT
 { NULL, NULL, NULL },
};
EOTEXT

### Win32 modules
cat > pango/module-defs-win32.c <<EOTEXT
/* Autogenerated by configure. Do not edit */

#include "module-defs.h"

PangoIncludedModule _pango_included_win32_modules[] = {
EOTEXT

IFS="${IFS= 	}"; pango_save_ifs="$IFS"; IFS=","
for module in $included_modules; do
  if echo $module | egrep -- "-win32($|,)" > /dev/null; then
    module_c=`echo $module | sed s/-/_/`
    cat >> pango/module-defs-win32.c <<EOTEXT
 { _pango_${module_c}_script_engine_list, _pango_${module_c}_script_engine_load,_pango_${module_c}_script_engine_unload },
EOTEXT
  fi
done

IFS="$pango_save_ifs"

cat >> pango/module-defs-win32.c <<EOTEXT
 { NULL, NULL, NULL },
};
EOTEXT

],[
included_modules=$included_modules
])

AC_HEADER_DIRENT
AC_CHECK_HEADER(unistd.h, AC_DEFINE(HAVE_UNISTD_H))

# Honor aclocal flags
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

AC_OUTPUT([
Makefile 
pango/Makefile
pango/mini-fribidi/Makefile
pango/opentype/Makefile
pango/pango.rc
pango/pangoft2.rc
pango/pangowin32.rc
modules/Makefile
modules/arabic/Makefile
modules/basic/Makefile
modules/hangul/Makefile
modules/indic/Makefile
modules/tamil/Makefile
modules/thai/Makefile
modules/hebrew/Makefile
examples/Makefile
docs/Makefile
docs/version.xml
tools/Makefile
tests/Makefile
tests/runtests.sh
pango.pc
pangox.pc
pangowin32.pc
pangoft2.pc
pangoxft.pc
pango-uninstalled.pc
pangox-uninstalled.pc
pangowin32-uninstalled.pc
pangoft2-uninstalled.pc
pangoxft-uninstalled.pc
pango-zip.sh
],[case "$CONFIG_FILES" in
*tests/runtests.sh*)chmod +x tests/runtests.sh;;
esac])
	
backends=""
if $have_freetype && $have_fontconfig ; then backends="$backends FreeType"; fi
if $have_x ; then backends="$backends X"; fi
if $have_xft ; then backends="$backends Xft"; fi
if $have_win32 ; then backends="$backends Win32"; fi
   
echo "configuration:
	backends:$backends"
